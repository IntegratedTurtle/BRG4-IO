<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Tutorials on BG und BRG4-IOI</title>
    <link>https://integratedturtle.github.io/BRG4-IO/tutorial/</link>
    <description>Recent content in Tutorials on BG und BRG4-IOI</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>de-de</language>
    <copyright>Sir Karl Popper Schule</copyright>
    <lastBuildDate>Sat, 13 Jul 2024 14:30:28 +0200</lastBuildDate>
    <atom:link href="https://integratedturtle.github.io/BRG4-IO/tutorial/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>Variablen einlesen</title>
      <link>https://integratedturtle.github.io/BRG4-IO/tutorial/variableneinlesen/</link>
      <pubDate>Sat, 13 Jul 2024 14:30:28 +0200</pubDate>
      <guid>https://integratedturtle.github.io/BRG4-IO/tutorial/variableneinlesen/</guid>
      <description>In den Aufgaben, die wir machen, müssen wir meist die Variablen selber einlesen. Das ist in C++ eigentlich nur auswendig lernen, deswegen kann es am Anfang noch etwas schwieriger sein zu wissen, was zu tun ist. Deshalb dieser Post.&#xA;Allgemeines std::cin ist eine Möglichkeit, Zeichen von der Kommandozeile einzulesen. Es mag im Vergleich zu vielen anderen Befehlen in C++ anders aussehen, unter anderem, weil es das einzige ist, das &amp;gt;&amp;gt; benutzt.</description>
    </item>
    <item>
      <title>Gcov</title>
      <link>https://integratedturtle.github.io/BRG4-IO/tutorial/gcov/</link>
      <pubDate>Thu, 11 Jul 2024 10:35:02 +0200</pubDate>
      <guid>https://integratedturtle.github.io/BRG4-IO/tutorial/gcov/</guid>
      <description>Gcov Wenn man Code geschrieben hat, un man sich nicht ganz sicher ist was jetzt genau passiert, oder der Code zu langsam ist, kann es nuetzlich sein sich anzusehen, wie oft welche Zeile laeuft.&#xA;Vorbereitung Compiliere deine .cpp Datei mit&#xA;--coverage Dann fuehr dein Program mit einem Testcase aus&#xA;Commands gcov test.cpp -m -k -t | less -R gcov: ruft das program auf m: Schreibt ganze funktionnamen k: Farben :-&amp;gt; t: terminal output, wenn du das Ergebniss in einen File speichern willst lass das weg, wenn du gcov aber mit less benutzen willst ist das wichtig | : Pipe: schickt output zum naechstem Command, da t aktiv ist schickt es den Text zu less R: Farben :-&amp;gt; Analyse !</description>
    </item>
    <item>
      <title>Upgrade your compiler</title>
      <link>https://integratedturtle.github.io/BRG4-IO/tutorial/gccompiler/</link>
      <pubDate>Thu, 11 Jul 2024 08:28:12 +0200</pubDate>
      <guid>https://integratedturtle.github.io/BRG4-IO/tutorial/gccompiler/</guid>
      <description>Commandline g++ hat die Moeglichkeit mit ein par command line Flags ein wenig geupgraded zu werden. https://bytes.usc.edu/cs104/wiki/gcc&#xA;Example command:&#xA;g++ -fsanitize=undefined,null -D_GLIBCXX_DEBUG -O1 -g -Wextra --std=c++17 your_program.cpp -o your_program Wall -Wextra show all warnings. It turns on all standard C++ warnings about code that might cause unexpected or undefined behavior. -02 Checks your program during the optimisations&#xA;Version --std=c++17 Allows you to use the c++ 17th edition features(build in binary search)</description>
    </item>
    <item>
      <title>Learn C&#43;&#43;</title>
      <link>https://integratedturtle.github.io/BRG4-IO/tutorial/learncpp/</link>
      <pubDate>Wed, 29 May 2024 13:25:57 +0200</pubDate>
      <guid>https://integratedturtle.github.io/BRG4-IO/tutorial/learncpp/</guid>
      <description>Video Playlist for learning C++ for beginners&#xA;Interactive websites If you&amp;rsquo;re starting from scratch Bit more advanced learning website&#xA;USA IOI Training Website&#xA;More in depth and advanced Topics\</description>
    </item>
  </channel>
</rss>
